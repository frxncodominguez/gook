name: release

on:
  push:
    branches:
      - main
    tags:
      - '*'

permissions:
  contents: write

jobs:

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goversion:
        - 1.23
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{matrix.goversion}}

    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v ./...

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6

  release:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goversion:
        - 1.23
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ github.repository_owner }}/gook
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Login to DockerHub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Login to GHCR
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{matrix.goversion}}

    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v6
      with:
        version: '~> v2'
        args: release --clean
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GOVERSION: ${{ matrix.goversion }}
        LOCAL_ORG: ${{ github.repository_owner }}